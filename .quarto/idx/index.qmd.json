{"title":"1. Introduction to Python programming","markdown":{"yaml":{"title":"1. Introduction to Python programming","author":"Dr. Piccoli","format":"live-html","pyodide":{"packages":["numpy","pandas","matplotlib","seaborn"]},"editor_options":{"chunk_output_type":"console"}},"headingText":"Talking with Python","containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n![Coding is fun!!!](gif/coding_is_fun.gif){width=\"700\"}\n\nIn this part of the course we will leverage the following resources:\n\n-   [Intro to Python book](https://automatetheboringstuff.com)\n\n::: {#custom-timer}\n```{r}\n#| echo: false\nlibrary(countdown)\ncountdown(\n  minutes = 5, \n  seconds = 0, \n  play_sound = TRUE,  # Play a sound when the timer finishes\n  warn_when = 180,    # Warn when 180 seconds are left\n  blink_colon = TRUE,\n  font_size = \"1.5rem\",  # Set smaller font size\n  start_immediately = FALSE,  # Start the timer automatically\n  color_background = \"#f2f2f2\",  # Neutral background color\n  color_border = \"darkred\"\n)\n```\n:::\n\n```{=html}\n<style>\n  /* Fix the custom timer div to the top-right corner */\n  #custom-timer {\n    position: fixed;    /* Ensure the timer stays fixed when scrolling */\n    top: 70px;          /* Distance from the top */\n    right: 10px;        /* Distance from the right */\n    font-size: 1rem;   /* Small font size */\n    z-index: 9999;       /* Ensure it stays on top of other elements */\n    width: 250px;        /* Set a small width for the timer */\n    text-align: center;  /* Center the text */\n  }\n</style>\n```\nPython is amazingly complex and powerful. It is also very picky about the syntax you use to communicate with it. However, Python is not intelligent. You are really just having a conversation with yourself, but using proper syntax. Python is a way for the creators of programs to express how the conversation is supposed to proceed.\n\nProgramming languages like Python need to be translated. There are two types of \"translator\": (1) `interpreters` and (2) `compilers`.\n\nAn **interpreter** reads the source code of the program as written by the programmer, parses the source code, and interprets the instructions on the fly. Python is an interpreter and when we are running Python interactively (like in this notebook), we can type a line of Python (a sentence) and Python processes it immediately and is ready for us to type another line of Python.\n\nA **compiler** needs to be handed the entire program in a file, and then it runs a process to translate the high-level source code into machine language and then the compiler puts the resulting machine language into a file for later execution.\n\nUnlike human languages, the Python vocabulary is actually pretty small. We call this \"vocabulary\" the \"reserved words\". These are words that have very special meaning to Python. When Python sees these words in a Python program, they have one and only one meaning to Python.\n\nThe reserved words in the language where humans talk to Python include the following:\n\n```         \nand       del       global      not       with\nas        elif      if          or        yield\nassert    else      import      pass\nbreak     except    in          raise\nclass     finally   is          return\ncontinue  for       lambda      try\ndef       from      nonlocal    while\n```\n\nYou will learn some fo these words later in the course. For now, remember to not use them as variable or function names.\n\nDuring this course you will learn how to write and execute your function but also how to use Python's built-in functions. Python has many built-in functions that are always ready to use. The first one you should learn is **`help()`**. You can use it any time you need to refresh your memory on how a particular function works. Type it in the line below and run (ask the instructor how to run a piece of code if you are not sure).\n\n```{pyodide}\n#| autorun: false\n#| startover: false\n#| min-lines: 3\n#| completion: true\nhelp()\n\n```\n\nAs you can see, you opened an interactive help. You can type name of any function, module, etc. Until you type \"quit\", the help prompt will remain active, allowing you to ask more question. Yet, it will block all the other lines from running. Now ask help about **`print()`** function (type \"print\" in the help prompt). Then close the help prompt (type \"quit\" in the help prompt).\n\nNow, once you know how the print function works, tell Python to print `Hello world!` (as every true programmer should do ;-)\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(\"Hello world!\")\n```\n\nSome of the lines in Python tell Python that you want it to remember some value for later. They do not give any visible output. Pick a name for that value to be remembered. We use the term *variable* to refer to the labels we use to refer to this stored data.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nx = 10\n```\n\nYou can use that variable to retrieve the value later. Instead of typing `print(10)` you can type `print([vairbale name])` (where `[variable name]` is the name you chose earlier)\n\nTry the print the value assigned to `x`\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(x)\n```\n\nAny value can be assigned to a variable. Variables can be also used in longer expressions or assigned to other variables (see the example below). Later you will see when it becomes useful.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ny = x * 2\n```\n\nNow let's print `y`\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(y)\n```\n\nLater, we will talk more about the variables.\n\n## Programs\n\nTyping commands into the Python interpreter is a great way to experiment with Python's features, but it is not recommended for solving more complex problems.\n\nNormally, when we want to write a program, we use a text editor to write the Python instructions into a file, which is called a **script**. By convention, Python scripts have names that end with `.py`.\n\nTo execute the script, you have to tell the Python interpreter the name of the file. Let's say we have a file called `python.py`. In a command window (or terminal), you would run a file as follows:\\\n`$ python python.py`\n\nWe use a special type of Python called iPython. In iPython we can use special notebooks (like the one you are reading now), which let us mix formatted text and Python code and execute Python code directly in the notebook.\n\nIf you want to install Python locally on your computer, check out one of these links: [Windows](https://www.py4e.com/software-win.php) [Mac](https://www.py4e.com/software-mac.php)\n\n## What is a program?\n\nThe definition of a **program** at its most basic is a sequence of Python statements that have been crafted to do something.\n\nFor example, look at the following text. Look at the text and figure out the most common word and how many times it occurs.\n\n`it may help to understand human affairs to be clear that most of the great triumphs and tragedies of history are caused, not by people being fundamentally good or fundamentally bad, but by people being fundamentally people ... he rather liked people`\n\nThen imagine that you are doing this task looking at millions of lines of text. It would be quicker for you to learn Python and write a Python program to count the words than it would be to manually scan the words.\n\nNow take a look at the code below and run it. It does exactly what you were supposed to do (but faster and, probably, more accurately).\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntext = \"it may help to understand human affairs to be clear that most of the great triumphs and tragedies of history are caused, not by people being fundamentally good or fundamentally bad, but by people being fundamentally people ... he rather liked people\"\ncounts = dict()\n\nwords = text.split()\n\nfor word in words:\n    counts[word] = counts.get(word, 0) + 1\n\nbigcount = None\nbigword = None\nfor word, count in list(counts.items()):\n    if bigcount is None or count > bigcount:\n        bigword = word\n        bigcount = count\n\nprint(bigword, bigcount)\n```\n\nYou don't even need to know Python to use this program. You are the end user, you simply use the program. This is a good example of how Python and the Python language are acting as an intermediary between the end user and the programmer.\n\n## The building blocks of a program\n\nThere are some low-level conceptual patterns that we use to construct programs. These constructs are not just for Python programs, they are part of every programming language from machine language up to the high-level languages.\n\n-   **input**\\\n    Get data from the \"outside world\". This might be reading data from a file, or even some kind of sensor like a microphone or GPS. In our initial programs, our input will come from the user typing data on the keyboard.\n\n-   **output**\\\n    Display the results of the program on a screen or store them in a file or perhaps write them to a device like a speaker to play music or speak text.\n\n-   **sequential execution**\\\n    Perform statements one after another in the order they are encountered in the script.\n\n-   **conditional execution**\\\n    Check for certain conditions and then execute or skip a sequence of statements.\n\n-   **repeated execution**\\\n    Perform some set of statements repeatedly, usually with some variation.\n\n-   **reuse**\\\n    Write a set of instructions once and give them a name and then reuse those instructions as needed throughout your program.\n\n# 2. Variables, expressions and statements\n\n## Values and value types\n\nA value is one of the basic things a program works with, like a letter or a number. These values belong to different types: 2 is an integer, and \"Hello, World!\" is a string, so called because it contains a \"string\" of letters.\n\nThese are all types in Python:\n\n-   `int` - numeric value (e.g `1`)\n\n-   `float` - a decimal (e.g `2.5`)\n\n-   `complex` - complex numbers coposed of real part and imaginary part (e.g. `6+4j` where j represents the imaginary part)\n\n-   `bool` - Boolean value - `True` or `False`\n\n-   `str` - text value (a string of letters) (e.g. `'Hello world!'`) - always enclosed in quotation marks!\n\n-   `list` - a list of values - `[1,2,3,4]`\n\n-   `tuple` - a tuple - `(1,2,3,4)`\n\n-   `dict` - a dictionary - `{1:\"one\", 2:\"two\", 3:\"three\"}`\n\nTo find a type of a value, you use function `type()`\n\n`type([value])`\n\nWhat is the data type of `\"Hello world!\"`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(\"pippo\")\n\n```\n\nWhat is the data type of `17`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(17)\n\n```\n\nWhat is the data type of `3.2`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(3.2)\n\n```\n\nWhat is the type of `3.2` and `\"3.2\"`? Why are they different?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(\"3.2\")\n```\n\nWhat will happen if you try to print `1,000,000` in Python? What is the type of `1,000,000`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(1000000)\n\n```\n\n## Variables\n\nOne of the most powerful features of a programming language is the ability to manipulate variables. A variable is a name that refers to a value. You assign a value to a variable using `=` sign:\n\n`[variable] = [value]`\n\nAssign `3.1415926535897931` to variable `pi`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = 3.1415926535897931\nprint(pi)\ntype(pi)\n```\n\nYou can assign value of any type to a variable.\n\nAssign `'Python ROCKS!!!'` to a variable called `message`.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmessage = 'Python ROCKS!!!'\n```\n\nNotice that assignement to a variable does not produce any output. You can print the value assigned to a variable by passing variable name to the `print()` function.\n\n**Attention!!** You pass the variable name without the quotation marks. That's how we can tell variables from strings.\n\nPrint `message`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(message)\n```\n\nPrint `pi`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = \"I love pie it is yummi!!!\"\nprint(pi, message, pi, sep = \" --------- \")\n```\n\nNow, you can check the type of the values by simply checking the type of a variable. Check the type of pi and message.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(message)\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(pi)\n```\n\nHave you noticed that the type of a variable is in fact the type of the assigned value?\n\n## Statements\n\nYou have just learned the second type of statments.\n\nA **statement** is a unit of code that the Python interpreter can execute. We have seen two kinds of statements: print being an expression statement and assignment.\n\nWhen you type a statement in interactive mode, the interpreter executes it and displays the result, if there is one. A script usually contains a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\n\nRun the following code and compare it with its output:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(1)\nx = 2\nprint(x)\n```\n\n# Operators\n\nOperators are special symbols that represent computations like addition and multiplication.\n\nThe operators `+`, `-`, `*`, `/`, and `**` perform addition, subtraction, multiplication, division, and exponentiation, as in the following examples:\n\n-   Addition\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n2+2\n```\n\n-   Subtraction\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n6-3\n```\n\n-   Multiplication\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n3*3\n```\n\n-   Division\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n10/2\n```\n\n-   Exponentiation\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n2**3\n```\n\nTry to use them all in one statement:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n\n```\n\nYou can perform operations also on variables.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = 3.1415926535897931\nsqr = 2\nprint(pi * sqr)\n```\n\nThis is also helpful when you want to update a variable. You simply perform an operation on the variable and assign it to the same name.\n\nUpdate the code below. Multiply `x` by your age.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nx = 1\nprint(x)\nx = 52 * x\nprint(x)\n```\n\n**Special case!!** `//` divides two integers and truncates the result to an integer. Compare the statements below:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n\n\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n5/2\n5//2\n5.0//2.0\n```\n\n## String operations\n\nThe `+` operator works with strings, but it is not addition in the mathematical sense. Instead it performs concatenation, which means joining the strings by linking them end to end.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = 10\nsecond = 15\nprint(first + second)\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = '10'\nsecond = '15'\nprint(first + second)\n```\n\nThe `*` operator also works with strings by multiplying the content of a string by an integer.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = '10'\nsecond = 3\nprint(first * second)\n```\n\n## User input\n\nPython provides a built-in function called `input` that gets input from the keyboard. When this function is called, the program stops and waits for the user to type something. When the user presses `Return` or `Enter`, the program resumes and `input` returns what the user typed as a string.\n\nTry it yourself:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ninp = input()\n```\n\nTo print the value entered by the user, you simply print the variable it was assigned to.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(inp)\n```\n\nYou can pass a string to `input` to be displayed to the user before pausing for input:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nname = input('What is your name?\\n')\nname = input('What is your name?')\n```\n\nThe sequence `\\n` at the end of the prompt represents a newline, which is a special character that causes a line break. That's why the user's input appears below the prompt.\n\nNow you can print your name:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nname\n```\n\nNow you can try it yourself.\n\n1.  Ask your user to type the number of books s/he read last month.\n\n2.  Assign the value to `number` variable\n\n3.  Transform `number` variable to an integer using `int()` (use `help()` if you need it)\n\n4.  Calculate the difference between the user and an average person (an average person reads 1 book a month)\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nb = input(\"books \\n\")\nb = b - 1\nb = str(b)\nprint('you read ' + b + ' books than the average person')\n```\n\n**Attention!!!**\\\nIf you expect the user to type a numeric value and the user types something other than a string of digits, you get an error (try to type the answer as a string, e.g. `six` instead of `6`). Why does it happen?\n\nLater, we will learn how to deal with such cases.\n\n## Comments\n\nAs programs get bigger and more complicated, they get more difficult to read. For this reason, it is a good idea to add notes to your programs to explain in natural language what the program is doing. These notes are called comments, and in Python they start with the \\# symbol:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n# compute the velocity in meters  per second of an object that moves 60 km/h\n\ns = 60*1000 #distance in meters\nt = 1*3600 #time in seconds\n\n#velocity formula: s/t\n\nv = s/t \n\nprint(v)\n```\n\nEverything from the \\# to the end of the line is ignored; it has no effect on the program.\n\n![**On completing your first Python class!**](gif/congrats.webp){fig-align=\"left\" width=\"700\"}\n<div class=\"disclaimer\">\n  <p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>\n</div>\n\n<style>\n.disclaimer {\n  font-size: 0.8em;\n  color: #666;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 20px;\n}\n</style>\n\n\n\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n# Talking with Python\n\n![Coding is fun!!!](gif/coding_is_fun.gif){width=\"700\"}\n\nIn this part of the course we will leverage the following resources:\n\n-   [Intro to Python book](https://automatetheboringstuff.com)\n\n::: {#custom-timer}\n```{r}\n#| echo: false\nlibrary(countdown)\ncountdown(\n  minutes = 5, \n  seconds = 0, \n  play_sound = TRUE,  # Play a sound when the timer finishes\n  warn_when = 180,    # Warn when 180 seconds are left\n  blink_colon = TRUE,\n  font_size = \"1.5rem\",  # Set smaller font size\n  start_immediately = FALSE,  # Start the timer automatically\n  color_background = \"#f2f2f2\",  # Neutral background color\n  color_border = \"darkred\"\n)\n```\n:::\n\n```{=html}\n<style>\n  /* Fix the custom timer div to the top-right corner */\n  #custom-timer {\n    position: fixed;    /* Ensure the timer stays fixed when scrolling */\n    top: 70px;          /* Distance from the top */\n    right: 10px;        /* Distance from the right */\n    font-size: 1rem;   /* Small font size */\n    z-index: 9999;       /* Ensure it stays on top of other elements */\n    width: 250px;        /* Set a small width for the timer */\n    text-align: center;  /* Center the text */\n  }\n</style>\n```\nPython is amazingly complex and powerful. It is also very picky about the syntax you use to communicate with it. However, Python is not intelligent. You are really just having a conversation with yourself, but using proper syntax. Python is a way for the creators of programs to express how the conversation is supposed to proceed.\n\nProgramming languages like Python need to be translated. There are two types of \"translator\": (1) `interpreters` and (2) `compilers`.\n\nAn **interpreter** reads the source code of the program as written by the programmer, parses the source code, and interprets the instructions on the fly. Python is an interpreter and when we are running Python interactively (like in this notebook), we can type a line of Python (a sentence) and Python processes it immediately and is ready for us to type another line of Python.\n\nA **compiler** needs to be handed the entire program in a file, and then it runs a process to translate the high-level source code into machine language and then the compiler puts the resulting machine language into a file for later execution.\n\nUnlike human languages, the Python vocabulary is actually pretty small. We call this \"vocabulary\" the \"reserved words\". These are words that have very special meaning to Python. When Python sees these words in a Python program, they have one and only one meaning to Python.\n\nThe reserved words in the language where humans talk to Python include the following:\n\n```         \nand       del       global      not       with\nas        elif      if          or        yield\nassert    else      import      pass\nbreak     except    in          raise\nclass     finally   is          return\ncontinue  for       lambda      try\ndef       from      nonlocal    while\n```\n\nYou will learn some fo these words later in the course. For now, remember to not use them as variable or function names.\n\nDuring this course you will learn how to write and execute your function but also how to use Python's built-in functions. Python has many built-in functions that are always ready to use. The first one you should learn is **`help()`**. You can use it any time you need to refresh your memory on how a particular function works. Type it in the line below and run (ask the instructor how to run a piece of code if you are not sure).\n\n```{pyodide}\n#| autorun: false\n#| startover: false\n#| min-lines: 3\n#| completion: true\nhelp()\n\n```\n\nAs you can see, you opened an interactive help. You can type name of any function, module, etc. Until you type \"quit\", the help prompt will remain active, allowing you to ask more question. Yet, it will block all the other lines from running. Now ask help about **`print()`** function (type \"print\" in the help prompt). Then close the help prompt (type \"quit\" in the help prompt).\n\nNow, once you know how the print function works, tell Python to print `Hello world!` (as every true programmer should do ;-)\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(\"Hello world!\")\n```\n\nSome of the lines in Python tell Python that you want it to remember some value for later. They do not give any visible output. Pick a name for that value to be remembered. We use the term *variable* to refer to the labels we use to refer to this stored data.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nx = 10\n```\n\nYou can use that variable to retrieve the value later. Instead of typing `print(10)` you can type `print([vairbale name])` (where `[variable name]` is the name you chose earlier)\n\nTry the print the value assigned to `x`\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(x)\n```\n\nAny value can be assigned to a variable. Variables can be also used in longer expressions or assigned to other variables (see the example below). Later you will see when it becomes useful.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ny = x * 2\n```\n\nNow let's print `y`\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(y)\n```\n\nLater, we will talk more about the variables.\n\n## Programs\n\nTyping commands into the Python interpreter is a great way to experiment with Python's features, but it is not recommended for solving more complex problems.\n\nNormally, when we want to write a program, we use a text editor to write the Python instructions into a file, which is called a **script**. By convention, Python scripts have names that end with `.py`.\n\nTo execute the script, you have to tell the Python interpreter the name of the file. Let's say we have a file called `python.py`. In a command window (or terminal), you would run a file as follows:\\\n`$ python python.py`\n\nWe use a special type of Python called iPython. In iPython we can use special notebooks (like the one you are reading now), which let us mix formatted text and Python code and execute Python code directly in the notebook.\n\nIf you want to install Python locally on your computer, check out one of these links: [Windows](https://www.py4e.com/software-win.php) [Mac](https://www.py4e.com/software-mac.php)\n\n## What is a program?\n\nThe definition of a **program** at its most basic is a sequence of Python statements that have been crafted to do something.\n\nFor example, look at the following text. Look at the text and figure out the most common word and how many times it occurs.\n\n`it may help to understand human affairs to be clear that most of the great triumphs and tragedies of history are caused, not by people being fundamentally good or fundamentally bad, but by people being fundamentally people ... he rather liked people`\n\nThen imagine that you are doing this task looking at millions of lines of text. It would be quicker for you to learn Python and write a Python program to count the words than it would be to manually scan the words.\n\nNow take a look at the code below and run it. It does exactly what you were supposed to do (but faster and, probably, more accurately).\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntext = \"it may help to understand human affairs to be clear that most of the great triumphs and tragedies of history are caused, not by people being fundamentally good or fundamentally bad, but by people being fundamentally people ... he rather liked people\"\ncounts = dict()\n\nwords = text.split()\n\nfor word in words:\n    counts[word] = counts.get(word, 0) + 1\n\nbigcount = None\nbigword = None\nfor word, count in list(counts.items()):\n    if bigcount is None or count > bigcount:\n        bigword = word\n        bigcount = count\n\nprint(bigword, bigcount)\n```\n\nYou don't even need to know Python to use this program. You are the end user, you simply use the program. This is a good example of how Python and the Python language are acting as an intermediary between the end user and the programmer.\n\n## The building blocks of a program\n\nThere are some low-level conceptual patterns that we use to construct programs. These constructs are not just for Python programs, they are part of every programming language from machine language up to the high-level languages.\n\n-   **input**\\\n    Get data from the \"outside world\". This might be reading data from a file, or even some kind of sensor like a microphone or GPS. In our initial programs, our input will come from the user typing data on the keyboard.\n\n-   **output**\\\n    Display the results of the program on a screen or store them in a file or perhaps write them to a device like a speaker to play music or speak text.\n\n-   **sequential execution**\\\n    Perform statements one after another in the order they are encountered in the script.\n\n-   **conditional execution**\\\n    Check for certain conditions and then execute or skip a sequence of statements.\n\n-   **repeated execution**\\\n    Perform some set of statements repeatedly, usually with some variation.\n\n-   **reuse**\\\n    Write a set of instructions once and give them a name and then reuse those instructions as needed throughout your program.\n\n# 2. Variables, expressions and statements\n\n## Values and value types\n\nA value is one of the basic things a program works with, like a letter or a number. These values belong to different types: 2 is an integer, and \"Hello, World!\" is a string, so called because it contains a \"string\" of letters.\n\nThese are all types in Python:\n\n-   `int` - numeric value (e.g `1`)\n\n-   `float` - a decimal (e.g `2.5`)\n\n-   `complex` - complex numbers coposed of real part and imaginary part (e.g. `6+4j` where j represents the imaginary part)\n\n-   `bool` - Boolean value - `True` or `False`\n\n-   `str` - text value (a string of letters) (e.g. `'Hello world!'`) - always enclosed in quotation marks!\n\n-   `list` - a list of values - `[1,2,3,4]`\n\n-   `tuple` - a tuple - `(1,2,3,4)`\n\n-   `dict` - a dictionary - `{1:\"one\", 2:\"two\", 3:\"three\"}`\n\nTo find a type of a value, you use function `type()`\n\n`type([value])`\n\nWhat is the data type of `\"Hello world!\"`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(\"pippo\")\n\n```\n\nWhat is the data type of `17`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(17)\n\n```\n\nWhat is the data type of `3.2`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(3.2)\n\n```\n\nWhat is the type of `3.2` and `\"3.2\"`? Why are they different?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(\"3.2\")\n```\n\nWhat will happen if you try to print `1,000,000` in Python? What is the type of `1,000,000`?\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(1000000)\n\n```\n\n## Variables\n\nOne of the most powerful features of a programming language is the ability to manipulate variables. A variable is a name that refers to a value. You assign a value to a variable using `=` sign:\n\n`[variable] = [value]`\n\nAssign `3.1415926535897931` to variable `pi`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = 3.1415926535897931\nprint(pi)\ntype(pi)\n```\n\nYou can assign value of any type to a variable.\n\nAssign `'Python ROCKS!!!'` to a variable called `message`.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmessage = 'Python ROCKS!!!'\n```\n\nNotice that assignement to a variable does not produce any output. You can print the value assigned to a variable by passing variable name to the `print()` function.\n\n**Attention!!** You pass the variable name without the quotation marks. That's how we can tell variables from strings.\n\nPrint `message`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(message)\n```\n\nPrint `pi`\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = \"I love pie it is yummi!!!\"\nprint(pi, message, pi, sep = \" --------- \")\n```\n\nNow, you can check the type of the values by simply checking the type of a variable. Check the type of pi and message.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(message)\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ntype(pi)\n```\n\nHave you noticed that the type of a variable is in fact the type of the assigned value?\n\n## Statements\n\nYou have just learned the second type of statments.\n\nA **statement** is a unit of code that the Python interpreter can execute. We have seen two kinds of statements: print being an expression statement and assignment.\n\nWhen you type a statement in interactive mode, the interpreter executes it and displays the result, if there is one. A script usually contains a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\n\nRun the following code and compare it with its output:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(1)\nx = 2\nprint(x)\n```\n\n# Operators\n\nOperators are special symbols that represent computations like addition and multiplication.\n\nThe operators `+`, `-`, `*`, `/`, and `**` perform addition, subtraction, multiplication, division, and exponentiation, as in the following examples:\n\n-   Addition\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n2+2\n```\n\n-   Subtraction\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n6-3\n```\n\n-   Multiplication\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n3*3\n```\n\n-   Division\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n10/2\n```\n\n-   Exponentiation\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n2**3\n```\n\nTry to use them all in one statement:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n\n```\n\nYou can perform operations also on variables.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\npi = 3.1415926535897931\nsqr = 2\nprint(pi * sqr)\n```\n\nThis is also helpful when you want to update a variable. You simply perform an operation on the variable and assign it to the same name.\n\nUpdate the code below. Multiply `x` by your age.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nx = 1\nprint(x)\nx = 52 * x\nprint(x)\n```\n\n**Special case!!** `//` divides two integers and truncates the result to an integer. Compare the statements below:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n\n\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n5/2\n5//2\n5.0//2.0\n```\n\n## String operations\n\nThe `+` operator works with strings, but it is not addition in the mathematical sense. Instead it performs concatenation, which means joining the strings by linking them end to end.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = 10\nsecond = 15\nprint(first + second)\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = '10'\nsecond = '15'\nprint(first + second)\n```\n\nThe `*` operator also works with strings by multiplying the content of a string by an integer.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nfirst = '10'\nsecond = 3\nprint(first * second)\n```\n\n## User input\n\nPython provides a built-in function called `input` that gets input from the keyboard. When this function is called, the program stops and waits for the user to type something. When the user presses `Return` or `Enter`, the program resumes and `input` returns what the user typed as a string.\n\nTry it yourself:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\ninp = input()\n```\n\nTo print the value entered by the user, you simply print the variable it was assigned to.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nprint(inp)\n```\n\nYou can pass a string to `input` to be displayed to the user before pausing for input:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nname = input('What is your name?\\n')\nname = input('What is your name?')\n```\n\nThe sequence `\\n` at the end of the prompt represents a newline, which is a special character that causes a line break. That's why the user's input appears below the prompt.\n\nNow you can print your name:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nname\n```\n\nNow you can try it yourself.\n\n1.  Ask your user to type the number of books s/he read last month.\n\n2.  Assign the value to `number` variable\n\n3.  Transform `number` variable to an integer using `int()` (use `help()` if you need it)\n\n4.  Calculate the difference between the user and an average person (an average person reads 1 book a month)\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nb = input(\"books \\n\")\nb = b - 1\nb = str(b)\nprint('you read ' + b + ' books than the average person')\n```\n\n**Attention!!!**\\\nIf you expect the user to type a numeric value and the user types something other than a string of digits, you get an error (try to type the answer as a string, e.g. `six` instead of `6`). Why does it happen?\n\nLater, we will learn how to deal with such cases.\n\n## Comments\n\nAs programs get bigger and more complicated, they get more difficult to read. For this reason, it is a good idea to add notes to your programs to explain in natural language what the program is doing. These notes are called comments, and in Python they start with the \\# symbol:\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\n# compute the velocity in meters  per second of an object that moves 60 km/h\n\ns = 60*1000 #distance in meters\nt = 1*3600 #time in seconds\n\n#velocity formula: s/t\n\nv = s/t \n\nprint(v)\n```\n\nEverything from the \\# to the end of the line is ignored; it has no effect on the program.\n\n![**On completing your first Python class!**](gif/congrats.webp){fig-align=\"left\" width=\"700\"}\n<div class=\"disclaimer\">\n  <p><strong>Images and GIFs Disclaimer:</strong> Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.</p>\n</div>\n\n<style>\n.disclaimer {\n  font-size: 0.8em;\n  color: #666;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 20px;\n}\n</style>\n\n\n\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\admin\\OneDrive\\Working\\Teaching\\Coding\\TestNetlify\\_extensions\\r-wasm\\live\\live.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"editor":"visual","title":"1. Introduction to Python programming","author":"Dr. Piccoli","pyodide":{"packages":["numpy","pandas","matplotlib","seaborn"]},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}